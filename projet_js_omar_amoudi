<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeu Siam Simplifié</title>
    <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 100vh;
    background-color: #fafafa;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
}

#infoTour {
    margin-bottom: 20px;
    font-size: 18px;
}

.plateau {
    display: grid;
    grid-template-columns: repeat(5, 80px);
    grid-template-rows: repeat(7, 80px);
    gap: 1px;
    margin-bottom: 20px;
    background-image: url('http://www.biboun.com/wp-content/uploads/2015/05/plateau-siam_x2_345x227_003.jpg');
    background-size: 110%; /* Slightly zoom in the background */
    background-position: center; /* Keep the image centered */
    width: calc(5 * 80px); /* Match the grid's width */
    height: calc(7 * 80px); /* Match the grid's height */
    background-color: #f0f0f0;
}
.zone {
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid #ccc;
    position: relative;
    height: 80px;   /* Adjusted height */
    width: 80px;    /* Adjusted width */
}

.piece {
    width: 70%;     /* Adjusted size of pieces */
    height: 70%;    /* Adjusted size of pieces */
    border-radius: 50%;
    position: relative;
    transition: transform 0.3s ease;
    background-size: cover;
    background-position: center;
}

.elephant {
    background-image: url('https://png.pngtree.com/png-clipart/20201020/ourmid/pngtree-hand-drawn-cartoon-elephant-gray-clipart-png-image_2370103.jpg'); /* Replace with your elephant image URL */
}

.rhinoceros {
    background-image: url('https://th.bing.com/th/id/OIP.xy5Zrgn5IYNOR_NRbckm_AHaHa?rs=1&pid=ImgDetMain'); /* Replace with your rhino image URL */
}

.rocher {
    background-image: url('https://th.bing.com/th/id/OIP.dJdoHPBlZnIKzq3gH2Vw5wHaHa?rs=1&pid=ImgDetMain'); /* Replace with your rock image URL */
}

.highlight {
    background-color: rgba(0, 255, 0, 0.3);
}

.highlight-invalid {
    background-color: rgba(255, 0, 0, 0.3);
}

#winnerBanner {
    display: none;
    font-size: 24px;
    color: green;
}

button {
    padding: 10px;
    margin: 10px;
}


    </style>
</head>
<body>

    <h1>Jeu Siam Simplifié</h1>
    <div id="infoTour">Tour du joueur : <span id="joueurActuel">Éléphant</span></div>
    <div class="plateau" id="plateau"></div>
    <div id="winnerBanner">Félicitations, vous avez gagné !</div>
    <div>
        <button id="resetBtn">Réinitialiser</button>
        <button id="skipTurnBtn">Passer le tour</button>
        <button id="rotateRightBtn">Tourner à droite</button>
        <button id="rotateLeftBtn">Tourner à gauche</button>
        <button id="rotate180Btn">Tourner 180°</button>
    </div>
    <script>
       class Piece {
    constructor(type) {
        this.type = type;
        this.rotation = 0; // Initial rotation angle (0, 90, 180, 270)
    }

    getClass() {
        return this.type;
    }
}

class Jeu {
    constructor() {
        this.plateau = Array(7).fill().map(() => Array(5).fill(null));
        this.joueurActuel = 'elephant';
        this.selectedPiece = null;
        this.initialiserPlateau();
        this.afficherPlateau();
        this.bindEvents();
    }

    initialiserPlateau() {
        // Place rocks in the center
        this.plateau[3][2] = new Piece('rocher');
        this.plateau[3][3] = new Piece('rocher');
        this.plateau[3][1] = new Piece('rocher');

        // Place rhinos above the board (row 0)
        for (let col = 0; col < 5; col++) {
            this.plateau[0][col] = new Piece('rhinoceros');
        }

        // Place elephants below the board (row 6)
        for (let col = 0; col < 5; col++) {
            this.plateau[6][col] = new Piece('elephant');
        }
    }

    afficherPlateau() {
        const plateauDiv = document.getElementById('plateau');
        plateauDiv.innerHTML = '';

        for (let i = 0; i < 7; i++) {
            for (let j = 0; j < 5; j++) {
                const zone = document.createElement('div');
                zone.classList.add('zone');
                zone.dataset.row = i;
                zone.dataset.col = j;

                const piece = this.plateau[i][j];
                if (piece) {
                    const pieceDiv = document.createElement('div');
                    pieceDiv.classList.add('piece', piece.getClass()); // Apply class dynamically
                    pieceDiv.style.transform = `rotate(${piece.rotation}deg)`; // Apply rotation

                    zone.appendChild(pieceDiv);
                }

                plateauDiv.appendChild(zone);
            }
        }
    }

    highlightMoves(row, col) {
        const plateauDiv = document.getElementById('plateau');
        const directions = [
            { dr: -1, dc: 0 }, // haut
            { dr: 1, dc: 0 },  // bas
            { dr: 0, dc: -1 }, // gauche
            { dr: 0, dc: 1 }   // droite
        ];

        directions.forEach(({ dr, dc }) => {
            const newRow = row + dr;
            const newCol = col + dc;

            if (newRow >= 0 && newRow < 7 && newCol >= 0 && newCol < 5 && !this.plateau[newRow][newCol]) {
                const zone = plateauDiv.querySelector(`.zone[data-row='${newRow}'][data-col='${newCol}']`);
                zone.classList.add('highlight');
            }
        });
    }

    clearHighlights() {
        document.querySelectorAll('.highlight').forEach(zone => {
            zone.classList.remove('highlight');
        });
    }

    changerTour() {
        this.joueurActuel = this.joueurActuel === 'elephant' ? 'rhinoceros' : 'elephant';
        document.getElementById('joueurActuel').textContent = this.joueurActuel;
    }

    reset() {
        this.plateau = Array(7).fill().map(() => Array(5).fill(null));
        this.joueurActuel = 'elephant';
        this.selectedPiece = null;
        this.initialiserPlateau();
        this.afficherPlateau();
        document.getElementById('winnerBanner').style.display = 'none'; // Hide winner banner
    }

    movePiece(fromRow, fromCol, toRow, toCol) {
        if (Math.abs(fromRow - toRow) > 1 || Math.abs(fromCol - toCol) > 1) {
            alert("Déplacement invalide !");
            this.changerTour();
            return;
        }

        if (this.plateau[toRow][toCol] === null) {
            this.plateau[toRow][toCol] = this.plateau[fromRow][fromCol];
            this.plateau[fromRow][fromCol] = null;
        } else if (this.plateau[toRow][toCol]?.type === 'rocher') {
            // Check for pushing a rock
            const nextRow = toRow + (toRow - fromRow);
            const nextCol = toCol + (toCol - fromCol);
            if (nextRow >= 0 && nextRow < 7 && nextCol >= 0 && nextCol < 5) {
                if (this.plateau[nextRow][nextCol] === null) {
                    this.plateau[nextRow][nextCol] = this.plateau[toRow][toCol];
                    this.plateau[toRow][toCol] = this.plateau[fromRow][fromCol];
                    this.plateau[fromRow][fromCol] = null;
                } else if (this.plateau[nextRow][nextCol]?.type === 'rocher') {
                    this.changerTour();
                    return;
                }
            } else {
                // If the rock reaches the edge of the board, win the game
                this.plateau[fromRow][fromCol] = null;
                this.plateau[toRow][toCol] = this.plateau[fromRow][fromCol]; // Animal takes the place of the rock
                this.checkForWin();
            }
        } else if (this.plateau[toRow][toCol]?.type === 'rhinoceros' || this.plateau[toRow][toCol]?.type === 'elephant') {
            // Handle pushing an animal
            const nextRow = toRow + (toRow - fromRow);
            const nextCol = toCol + (toCol - fromCol);
            if (nextRow >= 0 && nextRow < 7 && nextCol >= 0 && nextCol < 5 && !this.plateau[nextRow][nextCol]) {
                this.plateau[nextRow][nextCol] = this.plateau[toRow][toCol];
                this.plateau[toRow][toCol] = this.plateau[fromRow][fromCol];
                this.plateau[fromRow][fromCol] = null;
            } else {
                this.changerTour();
                return;
            }
        }

        if (this.checkForWin()) {
            return;
        }

        this.changerTour();
    }

    checkForWin() {
        for (let col = 0; col < 5; col++) {
            if (this.plateau[0][col]?.type === 'elephant') {
                this.endGame('L\'éléphant a gagné!');
                return true;
            }
        }
        for (let col = 0; col < 5; col++) {
            if (this.plateau[6][col]?.type === 'rhinoceros') {
                this.endGame('Le rhinocéros a gagné!');
                return true;
            }
        }
        return false;
    }

    endGame(message) {
        alert(message);
        document.getElementById('winnerBanner').style.display = 'block';
        document.getElementById('winnerBanner').textContent = message;
        this.reset();
    }

    rotatePiece(row, col, direction) {
        const piece = this.plateau[row][col];
        if (!piece) return;

        if (direction === 'right') {
            piece.rotation += 90;
        } else if (direction === 'left') {
            piece.rotation -= 90;
        } else if (direction === '180') {
            piece.rotation += 180;
        }

        piece.rotation %= 360; // Keep it within 0-360 degrees
        this.afficherPlateau();
    }

    bindEvents() {
        document.getElementById('resetBtn').addEventListener('click', () => this.reset());

        document.getElementById('skipTurnBtn').addEventListener('click', () => {
            this.changerTour(); // Skip the turn
        });

        document.getElementById('rotateRightBtn').addEventListener('click', () => {
            if (this.selectedPiece) {
                const { row, col } = this.selectedPiece;
                this.rotatePiece(row, col, 'right');
            }
        });

        document.getElementById('rotateLeftBtn').addEventListener('click', () => {
            if (this.selectedPiece) {
                const { row, col } = this.selectedPiece;
                this.rotatePiece(row, col, 'left');
            }
        });

        document.getElementById('rotate180Btn').addEventListener('click', () => {
            if (this.selectedPiece) {
                const { row, col } = this.selectedPiece;
                this.rotatePiece(row, col, '180');
            }
        });

        document.getElementById('plateau').addEventListener('click', (e) => {
            const zone = e.target.closest('.zone');
            if (!zone) return;

            const row = parseInt(zone.dataset.row);
            const col = parseInt(zone.dataset.col);

            const piece = this.plateau[row][col];
            this.clearHighlights();

            if (piece && piece.type === this.joueurActuel) {
                this.selectedPiece = { row, col, piece };
                this.highlightMoves(row, col);
            } else if (this.selectedPiece) {
                const { row: oldRow, col: oldCol } = this.selectedPiece;
                if (this.isValidMove(oldRow, oldCol, row, col)) {
                    this.movePiece(oldRow, oldCol, row, col);
                }
                this.selectedPiece = null;
                this.afficherPlateau();
            }
        });
    }

    // Validate movement based on vertical or horizontal constraints
    isValidMove(fromRow, fromCol, toRow, toCol) {
        return (fromRow === toRow || fromCol === toCol); // Only horizontal or vertical movement
    }
}

const jeu = new Jeu();
    </script>

</body>
</html>


